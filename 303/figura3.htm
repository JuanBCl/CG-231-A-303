<!DOCTYPE html>
<html lang="en-GB">

<head>
  <meta charset="utf-8" />
  <title>Grupo de cubos y cono</title>
  <style>
    body {
      margin: 0;
    }
  </style>
</head>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';
  
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0xDDDDDD, 1);
    document.body.appendChild(renderer.domElement);

    var scene = new THREE.Scene();

    var size = 500;
        var divisions = 100;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);
        gridHelperXZ.position.y = -2;
        scene.add(gridHelperXZ);

    var camera = new THREE.PerspectiveCamera(80, WIDTH / HEIGHT);
    camera.position.z = 1; //z
    camera.position.y = 3; //y
    camera.position.x = -10;
    scene.add(camera);
    const light = new THREE.AmbientLight(0x404040, 50);
    scene.add(light);

    // Creamos los vértices del dodecaedro
const phi = (1 + Math.sqrt(5)) / 2; // Proporción dorada
const vertices = [
  // Vértices de un icosaedro de radio 1
  [-1,  phi, 0], [ 1,  phi, 0], [-1, -phi, 0], [ 1, -phi, 0],
  [0, -1,  phi], [0,  1,  phi], [0, -1, -phi], [0,  1, -phi],
  [ phi, 0, -1], [ phi, 0,  1], [-phi, 0, -1], [-phi, 0,  1],
];

// Creamos las caras del dodecaedro
const faces = [
  // Caras de un icosaedro
  [0, 11, 5],  [0, 5, 1],   [0, 1, 7],   [0, 7, 10],  [0, 10, 11],
  [1, 5, 9],   [5, 11, 4],  [11, 10, 2], [10, 7, 6],  [7, 1, 8],
  [3, 9, 4],   [3, 4, 2],   [3, 2, 6],   [3, 6, 8],   [3, 8, 9],
  [4, 9, 5],   [2, 4, 11],  [6, 2, 10],  [8, 6, 7],   [9, 8, 1],
];

// Creamos la geometría
const geometry = new THREE.BufferGeometry();

// Añadimos los vértices a la geometría
const position = new Float32Array(vertices.flat());
geometry.setAttribute('position', new THREE.BufferAttribute(position, 3));

// Añadimos las caras a la geometría
const index = new Uint16Array(faces.flat());
geometry.setIndex(new THREE.BufferAttribute(index, 1));

// Creamos el material
const material = new THREE.MeshBasicMaterial({ color: 0x34f464, wireframe: true});

// Creamos la malla
const dodecahedron = new THREE.Mesh(geometry, material);

// Añadimos la malla a la escena
scene.add(dodecahedron);

    const controls = new OrbitControls(camera, renderer.domElement);

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera)
    }
    animate();


  </script>

</body>

</html>